type Study {
  id: ID!
  name: String
  description: String
  label: String
  versions: [StudyVersion!]
  documentedBy: [StudyDefinitionDocument!]
}

type StudyVersion {
  id: ID!
  versionIdentifier: String!
  rationale: String
  study: Study!
  studyDesigns: [StudyDesign!]
  organizations(role: String): [Organization!]
  amendments: [StudyAmendment!]
  studyInterventions: [StudyIntervention!]
  roles: [String!],
  biomedicalConcepts: [BioMedicalConcept!]
  bcSurrogates: [BCSurrogate!]
  conditions: [Conditions!]
}

type BioMedicalConcept {
  id: ID!
  name: String
  label: String
  reference: String
  instanceType: String!
  synonyms: [String!]
  code: BioMedicalConceptCode!
}

type BioMedicalConceptCode {
  id: ID!
  code: String!
  codeSystem: String!
  codeSystemVersion: String
  decode: String!
  instanceType: String!
}

type BCSurrogate {
  id: ID!
  name: String
  label: String
  description: String
  reference: String
  instanceType: String!
}

type Conditions {
  id: ID!
  name: String
  label: String
  description: String
  text: String
  contextIds: [String!]
  appliesToIds: [String!]
}

type StudyDesign {
  id: ID!
  name: String
  description: String
  studyType: String
  studyPhase: String
  arms: [Arm!]
  encounters: [Encounter!]
  activities: [Activity!]
  epochs: [Epoch!]
  elements: [Element!]
  studyCells: [StudyCell!]
}

type Encounter {
  id: ID!
  name: String
  label: String
  description: String
  type: EncounterType
  previousId: String
  nextId: String
  scheduledAtId: String
}

type EncounterType {
  id: ID!
  code: String!
  codeSystem: String!
  codeSystemVersion: String!
  decode: String!
  instanceType: String!
}

type Activity {
  id: ID!
  name: String
  label: String
  description: String
  definedProcedures: [DefinedProcedure!]
  instanceType: String!
}

type DefinedProcedure {
  id: ID!
  name: String
  label: String
  description: String
  procedureType: String
  code: Code
  studyInterventionId: String
  instanceType: String!
}

type Code {
  id: ID!
  code: String!
  codeSystem: String!
  codeSystemVersion: String!
  decode: String!
  instanceType: String!
}

type Arm {
  id: ID!
  name: String
  description: String
  type: String
  studyDesign: StudyDesign!
}

type Epoch {
  id: ID!
  name: String
  description: String
  type: String
  studyDesign: StudyDesign!
  precedes: Epoch
  precededBy: Epoch
}

type Element {
    id: ID!
    name: String
    description: String
}

type StudyCell {
    id: ID!
    arm: Arm!
    epoch: Epoch!
    elements: [Element!]
}

type StudyAmendment {
  id: ID!
  name: String
  label: String
  summary: String
  description: String
  number: String
  primaryReason: StudyAmendmentPrimaryReason!
  enrollments: [Enrollment!]
}

type StudyAmendmentPrimaryReason {
  id: ID!
  code: PrimaryReasonCode!
  instanceType: String!
}

type PrimaryReasonCode {
  id: ID!
  code: String!
  codeSystem: String!
  codeSystemVersion: String
  decode: String!
  instanceType: String!
}

type Enrollment {
  id: ID!
  name: String
  quantity: Quantity!
}

type Quantity {
  id: ID!
  value: Int!
  unit: String
  instanceType: String
}

type StudyIntervention {
  id: ID!
  name: String
  description: String
  role: String
  type: String
}

type Organization {
  id: ID!
  name: String
  type: String
  legalAddress: LegalAddress
}

type LegalAddress {
  id: ID!
  extensionAttributes: [String!]
  text: String
  lines: [String!]
  city: String
  district: String
  state: String
  postalCode: String
  country: Country
}

type Country {
  id: ID!
  code: String!
  codeSystem: String!
  codeSystemVersion: String
  decode: String!
  instanceType: String
}

type StudyDefinitionDocument {
    id: ID!
    name: String
    type: String
}

type NodeCount {
  label: String!
  count: Int!
}

type Query {
  study(id: ID!): Study
  studies: [Study!]
  studyVersion(id: ID!): StudyVersion
  organization(id: ID!): Organization
  activities: [Activity!]
  encounters: [Encounter!]
  graphStats: [NodeCount!]
}

type Mutation {
  deleteStudy(id: ID!): Boolean
}
